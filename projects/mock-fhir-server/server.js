const fs = require("fs");
const path = require("path");
const jsonServer = require("json-server");

/**
 * This is a very simple server that is designed specifically for serving
 * FHIR resources from the transaction bundles generated by Synthea.
 * - It only has the bare minimum capabilities required for the showcase app.
 * - It will probably break if you try use it for anything else.
 * - It is probably not compliant with FHIR specs.
 */
function generateData() {
  const data = {
    metadata: JSON.parse(fs.readFileSync("./capabilities.json")),
  };
  const dataPath = "./data";
  const filenames = fs.readdirSync(dataPath);
  for (let filename of filenames) {
    const file = fs.readFileSync(path.join(dataPath, filename));
    const bundle = JSON.parse(file);
    for (let entry of bundle.entry) {
      const { method, url } = entry.request;
      if (method === "POST") {
        if (!data[url]) {
          data[url] = [];
        }
        resolveReferences(entry.resource);
        data[url].push(entry.resource);
      } else {
        console.warn(`Unsupported Transaction request method: ${method}`);
      }
    }
  }
  return data;
}

const internalReferencePrefix = "urn:uuid:";
/**
 * Resolve references by simply removing the prefix and using the bundle's internal ID as the real resource ID.
 * This will break if the bundles do not use UUIDs internally.
 */
function resolveReferences(node) {
  for (let prop in node) {
    if (typeof node[prop] === "string" && node[prop].startsWith(internalReferencePrefix)) {
      node[prop] = node[prop].substring(internalReferencePrefix.length);
    } else if (typeof node[prop] === "object") {
      resolveReferences(node[prop]);
    }
  }
}

/** Create JSON Server */
const server = jsonServer.create();
const router = jsonServer.router(generateData());
const middlewares = jsonServer.defaults();

/** Wrap collections in a searchset Bundle */
router.render = (req, res) => {
  if (Array.isArray(res.locals.data)) {
    res.jsonp({
      resourceType: "Bundle",
      type: "searchset",
      entry: res.locals.data.map((resource) => ({ resource })),
    });
  } else {
    res.jsonp(res.locals.data);
  }
};

server.use(middlewares);
server.use(router);
server.listen(3000, () => {
  console.log("JSON Server is running on http://localhost:3000");
});
